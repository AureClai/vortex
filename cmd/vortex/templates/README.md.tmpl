# {{.ProjectName}}
A high-performance Vortex WebAssembly application with advanced styling capabilities.

## 🚀 Features

This project showcases Vortex's advanced capabilities:

- ⚡ **Style Precompilation** - Maximum runtime performance
- 🎨 **Type-Safe CSS** - Compile-time validation and safety
- 📱 **Responsive Design** - Built-in media query support
- ✨ **Advanced Effects** - Shadows, gradients, animations
- 📊 **Performance Monitoring** - Built-in performance tracking
- 🎯 **Organized Architecture** - Scalable style management

## 📁 Enhanced Project Structure

- `+"`main.go`"+` - Application entry point with style initialization
- `+"`layout/app.go`"+` - Main application component
- `+"`styles/app.go`"+` - Application-specific styles (precompiled)
- `+"`styles/common.go`"+` - Common style patterns and utilities
- `+"`index.html`"+` - HTML template
- `+"`go.mod`"+` - Go module configuration

## 🚀 Getting Started

### Prerequisites
- Go 1.25.1 or later
- Modern web browser with WebAssembly support

### Development

1. **Build the application:**
`+"   ```bash\n   vortex build\n   ```"+`

2. **Start the development server:**
`+"   ```bash\n   vortex dev\n   ```"+`

3. **Open your browser:**
   Visit http://localhost:8080 to see your high-performance app!

## ⚡ Performance Features

This template demonstrates:

1. **Style Precompilation** - All styles are pre-generated at startup
2. **Performance Monitoring** - Built-in metrics and statistics
3. **Optimized Patterns** - Common styles cached for maximum speed
4. **Type Safety** - Compile-time CSS validation prevents runtime errors

## 🎨 Styling Architecture

The styles are organized for maximum maintainability and performance:

- **styles/app.go** - Component-specific styles
- **styles/common.go** - Reusable patterns and utilities
- **Precompilation** - All styles cached at startup
- **Type Safety** - Impossible to generate invalid CSS

## 📚 Learn More

- [Vortex Documentation](https://github.com/AureClai/vortex)
- [Advanced Styling Guide](https://github.com/AureClai/vortex/wiki/styling)
- [Performance Best Practices](https://github.com/AureClai/vortex/wiki/performance)
- [WebAssembly with Go](https://golang.org/pkg/syscall/js/)

## 🛠️ Next Steps

1. Explore the `+"`styles/`"+` directory to see advanced styling patterns
2. Modify `+"`layout/app.go`"+` to build your application
3. Add new styles to `+"`styles/app.go`"+` and precompile them
4. Monitor performance using the built-in statistics
5. Build something amazing with high-performance Go WebAssembly!

---

Built with ❤️ using [Vortex](https://github.com/AureClai/vortex) - The High-Performance Go WebAssembly Framework